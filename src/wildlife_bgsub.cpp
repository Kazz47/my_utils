//Logging
#include <glog/logging.h>

//C++
#include <fstream>

//opencv
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/features2d/features2d.hpp>

//My Libs
#include "vansub.hpp"

/** Global Vars*/
cv::Mat fgMaskVIBE; //fg mask fg mask generated by VIBE
cv::Mat fgMaskMOG; //fg mask fg mask generated by MOG
cv::Ptr<cv::BackgroundSubtractor> pVIBE; //My Background subtractor
cv::Ptr<cv::BackgroundSubtractor> pMOG; //MOG Background subtractor
std::ofstream vibe_file;
std::ofstream mog_file;

/** Function Headers */
void help();
void processVideo(std::string vid_filename, std::string event_filename);
void writeFramenumber(cv::Mat &frame, double frame_num);

// TODO Update the help info
void help() {
    LOG(INFO) << "--------------------------------------------------------------------------";
    LOG(INFO) << "This program shows how to use background subtraction methods provided by ";
    LOG(INFO) << " OpenCV. You can process both videos (-vid) and images (-img).";
    LOG(INFO) << "Usage:";
    LOG(INFO) << "./wildlife_bgsub <video filename> <event filename>";
    LOG(INFO) << "for example: ./wildlife_bgsub video.avi events.dat";
    LOG(INFO) << "--------------------------------------------------------------------------";
}

/**
 * @function main
 */
int main(int argc, char* argv[])
{
    FLAGS_logtostderr = 1;
    google::InitGoogleLogging(argv[0]);

    //print help information
    help();

    //check for the input parameter correctness
    if(argc != 3) {
        LOG(ERROR) << "Incorret input list";
        return EXIT_FAILURE;
    }

    //create GUI windows
    cv::namedWindow("Frame");
    cv::namedWindow("Model");
    cv::namedWindow("FG Mask");
    cv::namedWindow("FG Mask MOG");

    //Open files
    vibe_file.open("white_vibe_pixels.dat");
    mog_file.open("white_mog_pixels.dat");

    std::string video_filename(argv[1]);
    std::string event_filename(argv[2]);

    //Close files
    vibe_file.close();
    mog_file.close();

    //destroy GUI windows
    cv::destroyAllWindows();
    return EXIT_SUCCESS;
}

/**
 * @function processVideo
 */
void processVideo(std::string vid_filename, std::string event_filename) {
    cv::Mat frame;

    //create the capture object
    cv::VideoCapture capture(vid_filename);
    //VideoCapture capture(0);
    if(!capture.isOpened()){
        //error in opening the video input
        LOG(ERROR) << "Unable to open video file: " << vid_filename;
        exit(EXIT_FAILURE);
    }

    double rows = capture.get(CV_CAP_PROP_FRAME_HEIGHT);
    double cols = capture.get(CV_CAP_PROP_POS_FRAMES);

    //create Background Subtractor objects
    //bsub = new BSub(); // my approach
    //bsub = new KOSub(rows, cols, 20, 2); // ko approach
    pVIBE = new VANSub(rows, cols, 10, 256, 20); // vibe approach
    pMOG = new cv::BackgroundSubtractorMOG(); //MOG approach

    //read input data.
    while(capture.read(frame)){
        //update the background model
        pVIBE->operator()(frame, fgMaskVIBE, 0.1);
        pMOG->operator()(frame, fgMaskMOG, 0.001);

        double frame_num = capture.get(CV_CAP_PROP_POS_FRAMES);
        writeFramenumber(frame, frame_num);

        cv::Mat model;
        pVIBE->getBackgroundImage(model);

        //show the current frame and the fg masks
        imshow("Frame", frame);
        imshow("Model", model);
        imshow("FG Mask VIBE", fgMaskVIBE);
        imshow("FG Mask MOG", fgMaskMOG);
        //get the input from the keyboard
        cv::waitKey(5);

        //Count white pixels
        size_t vibe_white = 0;
        for (int r = 0; r < fgMaskVIBE.rows; r++) {
            for (int c = 0; c < fgMaskVIBE.cols; c++) {
                if(fgMaskVIBE.at<float>(r, c) > 0) {
                    vibe_white++;
                }
            }
        }

        size_t mog_white = 0;
        for (int r = 0; r < fgMaskMOG.rows; r++) {
            for (int c = 0; c < fgMaskMOG.cols; c++) {
                if(fgMaskMOG.at<float>(r, c) > 0) {
                    mog_white++;
                }
            }
        }

        //Print Stuff
        vibe_file << vibe_white << std::endl;
        mog_file << mog_white << std::endl;
    }
    capture.release();
}

void writeFramenumber(cv::Mat &frame, double frame_num) {
    std::stringstream ss;
    cv::rectangle(frame, cv::Point(10, 2), cv::Point(100,20), cv::Scalar(255,255,255), -1);
    ss << frame_num;
    std::string frameNumberString = ss.str();
    cv::putText(frame, frameNumberString.c_str(), cv::Point(15, 15), cv::FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
}
